//**********************************************************************
//
// Copyright (c) 2006
// PathEngine
// Lyon, France
//
// All Rights Reserved
//
//**********************************************************************

#include "platform_common/Header.h"
#include "MethodSpecificDecoding.h"
#include "Decoder.h"
#include "common/interface/Assert.h"

void
MethodSpecificDecoding(
        cDecoder& decoder,
        tSigned32 interfaceIndex, tSigned32 methodIndex, bool methodEntry
        )
{
    switch(interfaceIndex)
    {
    default:
        invalid();
    case 0:
        decoder.writeInterfaceName("iPathEngine");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("getVersionAttributes");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_const_char__starconst_star("returnValue");
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getInterfaceMajorVersion");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("getInterfaceMinorVersion");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("getReleaseNumbers");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("majorReleaseNumber");
                    decoder.decode_tSigned32("minorReleaseNumber");
                    decoder.decode_tSigned32("internalReleaseNumber");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("setErrorHandler");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("getErrorHandler");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("setPathPoolParameters");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("pathsPooled");
                    decoder.decode_tSigned32("pointsPerPath");
                }
                else
                {
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("shapeIsValid");
                if(methodEntry)
                {
                    decoder.decodeCollisionShape();
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("newShape");
                if(methodEntry)
                {
                    decoder.decodeCollisionShape();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("loadMeshFromBuffer");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("format");
                    decoder.decodeDataBuffer();
                    decoder.decode_const_char__starconst_star("options");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 10:
            {
                decoder.writeMethodName("buildMeshFromContent");
                if(methodEntry)
                {
                    decoder.decodeSourceContent();
                    decoder.decode_const_char__starconst_star("options");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 11:
            {
                decoder.writeMethodName("saveContentData");
                if(methodEntry)
                {
                    decoder.decodeSourceContent();
                    decoder.decode_const_char_star("format");
                }
                else
                {
                }
                break;
            }
        case 12:
            {
                decoder.writeMethodName("totalMemoryAllocated");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tUnsigned32("returnValue");
                }
                break;
            }
        case 13:
            {
                decoder.writeMethodName("maximumMemoryAllocated");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tUnsigned32("returnValue");
                }
                break;
            }
        case 14:
            {
                decoder.writeMethodName("resetMaximumMemoryAllocated");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 15:
            {
                decoder.writeMethodName("setRandomSeed");
                if(methodEntry)
                {
                    decoder.decode_tUnsigned32("value");
                }
                else
                {
                }
                break;
            }
        case 16:
            {
                decoder.writeMethodName("collisionPreprocessVersionIsCompatible");
                if(methodEntry)
                {
                    decoder.decodeDataBuffer();
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 17:
            {
                decoder.writeMethodName("pathfindPreprocessVersionIsCompatible");
                if(methodEntry)
                {
                    decoder.decodeDataBuffer();
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 18:
            {
                decoder.writeMethodName("deleteAllObjects");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 19:
            {
                decoder.writeMethodName("newContentChunk");
                if(methodEntry)
                {
                    decoder.decode_const_char__starconst_star("attributes");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 20:
            {
                decoder.writeMethodName("loadContentChunk");
                if(methodEntry)
                {
                    decoder.decodeDataBuffer();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 21:
            {
                decoder.writeMethodName("buildMeshFederation_FromWorldMesh");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("worldMesh");
                    decoder.decode_tSigned32("tileSize");
                    decoder.decode_tSigned32("overlap");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 22:
            {
                decoder.writeMethodName("loadFederation");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("format");
                    decoder.decodeDataBuffer();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 23:
            {
                decoder.writeMethodName("buildMeshFederation_TilingOnly");
                if(methodEntry)
                {
                    decoder.decode_cHorizontalRange("worldRange");
                    decoder.decode_tSigned32("tileSize");
                    decoder.decode_tSigned32("overlap");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 24:
            {
                decoder.writeMethodName("largeStaticObstacleShapeIsValid");
                if(methodEntry)
                {
                    decoder.decodeCollisionShape();
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        }
        break;
    case 1:
        decoder.writeInterfaceName("iShape");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("size");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("vertex");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                break;
            }
        }
        break;
    case 2:
        decoder.writeInterfaceName("iMesh");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getNumberOf3DFaces");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("get3DFaceAtPosition");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("get3DFaceVertex");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("faceIndex");
                    decoder.decode_tSigned32("vertexIndexInFace");
                }
                else
                {
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                    decoder.decode_float("z");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("get3DFaceConnection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("faceIndex");
                    decoder.decode_tSigned32("edgeIndexInFace");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("get3DFaceNormal");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("faceIndex");
                }
                else
                {
                    decoder.decode_float("resultX");
                    decoder.decode_float("resultY");
                    decoder.decode_float("resultZ");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("get3DFaceAttribute");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("faceIndex");
                    decoder.decode_tSigned32("attributeIndex");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("getNumberOfSections");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("getSurfaceType");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("getSectionID");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 10:
            {
                decoder.writeMethodName("storeAnchor");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("id");
                    decoder.decode_cPosition("position");
                    decoder.decode_tSigned32("orientation");
                }
                else
                {
                }
                break;
            }
        case 11:
            {
                decoder.writeMethodName("retrieveAnchor");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("id");
                }
                else
                {
                    decoder.decode_tSigned32("orientation");
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 12:
            {
                decoder.writeMethodName("getNumberOfAnchors");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 13:
            {
                decoder.writeMethodName("retrieveAnchorByIndex");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decode_cPosition("position");
                    decoder.decode_tSigned32("orientation");
                    decoder.decode_const_char_star("id");
                }
                break;
            }
        case 14:
            {
                decoder.writeMethodName("storeNamedObstacle");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("id");
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                }
                break;
            }
        case 15:
            {
                decoder.writeMethodName("retrieveNamedObstacle");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("id");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 16:
            {
                decoder.writeMethodName("getNumberOfNamedObstacles");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 17:
            {
                decoder.writeMethodName("retrieveNamedObstacleByIndex");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decodeAPIObject("agent");
                    decoder.decode_const_char_star("id");
                }
                break;
            }
        case 18:
            {
                decoder.writeMethodName("positionFor3DPoint");
                if(methodEntry)
                {
                    decoder.decode_const_tSigned32_star("point");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 19:
            {
                decoder.writeMethodName("positionFor3DPointF");
                if(methodEntry)
                {
                    decoder.decode_const_float_star("point");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 20:
            {
                decoder.writeMethodName("positionNear3DPoint");
                if(methodEntry)
                {
                    decoder.decode_const_tSigned32_star("point");
                    decoder.decode_tSigned32("horizontalRange");
                    decoder.decode_tSigned32("verticalRange");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 21:
            {
                decoder.writeMethodName("positionInSection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 22:
            {
                decoder.writeMethodName("positionInSectionFor3DPoint");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                    decoder.decode_const_tSigned32_star("point");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 23:
            {
                decoder.writeMethodName("positionInSectionFor3DPointF");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                    decoder.decode_const_float_star("point");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 24:
            {
                decoder.writeMethodName("positionInSectionNear3DPoint");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                    decoder.decode_const_tSigned32_star("point");
                    decoder.decode_tSigned32("horizontalRange");
                    decoder.decode_tSigned32("verticalRange");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 25:
            {
                decoder.writeMethodName("positionFor3DPoint_ExcludeTerrain");
                if(methodEntry)
                {
                    decoder.decode_const_tSigned32_star("point");
                    decoder.decode_tSigned32("numberOfTerrainLayers");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 26:
            {
                decoder.writeMethodName("generateRandomPosition");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 27:
            {
                decoder.writeMethodName("generateRandomPositionLocally");
                if(methodEntry)
                {
                    decoder.decode_cPosition("centre");
                    decoder.decode_tSigned32("range");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 28:
            {
                decoder.writeMethodName("generateRandomPositionInSection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 29:
            {
                decoder.writeMethodName("heightAtPosition");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 30:
            {
                decoder.writeMethodName("heightAtPositionF");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_float("returnValue");
                }
                break;
            }
        case 31:
            {
                decoder.writeMethodName("heightAtPositionWithPrecision");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                    decoder.decode_float("precisionX");
                    decoder.decode_float("precisionY");
                }
                else
                {
                    decoder.decode_float("returnValue");
                }
                break;
            }
        case 32:
            {
                decoder.writeMethodName("getCellForEndOfLine");
                if(methodEntry)
                {
                    decoder.decode_cPosition("start");
                    decoder.decode_tSigned32("endX");
                    decoder.decode_tSigned32("endY");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 33:
            {
                decoder.writeMethodName("positionIsValid");
                if(methodEntry)
                {
                    decoder.decode_cPosition("p");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 34:
            {
                decoder.writeMethodName("burnContextIntoMesh");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                }
                else
                {
                }
                break;
            }
        case 35:
            {
                decoder.writeMethodName("saveGround");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("format");
                    decoder.decode_bool("includeMapping");
                }
                else
                {
                }
                break;
            }
        case 36:
            {
                decoder.writeMethodName("setTerrainCallBack");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("terrainLayer");
                    decoder.decodeClassCallBack("callBack");
                }
                else
                {
                }
                break;
            }
        case 37:
            {
                decoder.writeMethodName("addEndPoint");
                if(methodEntry)
                {
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 38:
            {
                decoder.writeMethodName("addOffMeshConnection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("fromEndPoint");
                    decoder.decode_tSigned32("toEndPoint");
                    decoder.decode_tSigned32("penalty");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 39:
            {
                decoder.writeMethodName("getNumberOfEndPoints");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 40:
            {
                decoder.writeMethodName("getEndPoint");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 41:
            {
                decoder.writeMethodName("getNumberOfOffMeshConnections");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 42:
            {
                decoder.writeMethodName("getOffMeshConnectionInfo");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decode_tSigned32("fromEndPoint");
                    decoder.decode_tSigned32("toEndPoint");
                    decoder.decode_tSigned32("penalty");
                }
                break;
            }
        case 43:
            {
                decoder.writeMethodName("clearOffMeshConnectionsAndEndPoints");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 44:
            {
                decoder.writeMethodName("generateCollisionPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decode_const_char__starconst_star("attributes");
                }
                else
                {
                }
                break;
            }
        case 45:
            {
                decoder.writeMethodName("generatePathfindPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decode_const_char__starconst_star("attributes");
                }
                else
                {
                }
                break;
            }
        case 46:
            {
                decoder.writeMethodName("releaseAllPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 47:
            {
                decoder.writeMethodName("releasePathfindPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 48:
            {
                decoder.writeMethodName("preprocessGenerationCompleted");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 49:
            {
                decoder.writeMethodName("shapeCanCollide");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 50:
            {
                decoder.writeMethodName("shapeCanPathfind");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 51:
            {
                decoder.writeMethodName("getCollisionPreprocessAttributes");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                    decoder.decode_const_char__starconst_star("returnValue");
                }
                break;
            }
        case 52:
            {
                decoder.writeMethodName("getPathfindPreprocessAttributes");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                    decoder.decode_const_char__starconst_star("returnValue");
                }
                break;
            }
        case 53:
            {
                decoder.writeMethodName("saveCollisionPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 54:
            {
                decoder.writeMethodName("savePathfindPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 55:
            {
                decoder.writeMethodName("loadCollisionPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeDataBuffer();
                }
                else
                {
                }
                break;
            }
        case 56:
            {
                decoder.writeMethodName("loadPathfindPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeDataBuffer();
                }
                else
                {
                }
                break;
            }
        case 57:
            {
                decoder.writeMethodName("placeAgent");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 58:
            {
                decoder.writeMethodName("newContext");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 59:
            {
                decoder.writeMethodName("newObstacleSet");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 60:
            {
                decoder.writeMethodName("testPointCollision");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 61:
            {
                decoder.writeMethodName("testLineCollision");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_cPosition("end");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 62:
            {
                decoder.writeMethodName("testLineCollision_XY");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_tSigned32("cell");
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 63:
            {
                decoder.writeMethodName("firstCollision");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_tSigned32("cell");
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 64:
            {
                decoder.writeMethodName("findClosestUnobstructedPosition");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("position");
                    decoder.decode_tSigned32("maximumDistance");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 65:
            {
                decoder.writeMethodName("getAllAgentsOverlapped");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decodeAgentVector();
                }
                break;
            }
        case 66:
            {
                decoder.writeMethodName("findShortestPath");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_cPosition("goal");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 67:
            {
                decoder.writeMethodName("findShortestPath_WithQueryCallBack");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_cPosition("goal");
                    decoder.decodeCallBack("queryCallBack");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 68:
            {
                decoder.writeMethodName("findPathAway");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_cPosition("awayFrom");
                    decoder.decode_tSigned32("distanceAway");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 69:
            {
                decoder.writeMethodName("findPathAway_WithQueryCallBack");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("start");
                    decoder.decode_cPosition("awayFrom");
                    decoder.decode_tSigned32("distanceAway");
                    decoder.decodeCallBack("queryCallBack");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 70:
            {
                decoder.writeMethodName("generateCurvedPath");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("basePath");
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("startVectorX");
                    decoder.decode_tSigned32("startVectorY");
                    decoder.decode_tSigned32("sectionLength");
                    decoder.decode_float("turnRatio1");
                    decoder.decode_float("turnRatio2");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 71:
            {
                decoder.writeMethodName("constructPath");
                if(methodEntry)
                {
                    decoder.decodePathBuffers();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 72:
            {
                decoder.writeMethodName("constructPath_Reversed");
                if(methodEntry)
                {
                    decoder.decodePathBuffers();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 73:
            {
                decoder.writeMethodName("savePath");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("path");
                }
                else
                {
                }
                break;
            }
        case 74:
            {
                decoder.writeMethodName("loadPath");
                if(methodEntry)
                {
                    decoder.decodeDataBuffer();
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 75:
            {
                decoder.writeMethodName("renderLineOnGround");
                if(methodEntry)
                {
                    decoder.decode_cPosition("start");
                    decoder.decode_tSigned32("endX");
                    decoder.decode_tSigned32("endY");
                    decoder.decode_tSigned32("originX");
                    decoder.decode_tSigned32("originY");
                }
                else
                {
                }
                break;
            }
        case 76:
            {
                decoder.writeMethodName("newObstacleSet_WithAttributes");
                if(methodEntry)
                {
                    decoder.decode_const_char__starconst_star("attributes");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 77:
            {
                decoder.writeMethodName("positionInSectionInShape");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("sectionID");
                    decoder.decode_tSigned32("shapeOriginX");
                    decoder.decode_tSigned32("shapeOriginY");
                    decoder.decodeCollisionShape();
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 78:
            {
                decoder.writeMethodName("generateCurvedPath_WithEndVector");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decodeAPIObject("basePath");
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("startVectorX");
                    decoder.decode_tSigned32("startVectorY");
                    decoder.decode_tSigned32("endVectorX");
                    decoder.decode_tSigned32("endVectorY");
                    decoder.decode_tSigned32("sectionLength");
                    decoder.decode_float("turnRatio1");
                    decoder.decode_float("turnRatio2");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 79:
            {
                decoder.writeMethodName("placeLargeStaticObstacle");
                if(methodEntry)
                {
                    decoder.decodeCollisionShape();
                    decoder.decode_cPosition("position");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 80:
            {
                decoder.writeMethodName("addAnchorsAndShapes");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("idPrefix");
                    decoder.decode_tSigned32("numberOfTerrainLayers");
                }
                else
                {
                }
                break;
            }
        }
        break;
    case 3:
        decoder.writeInterfaceName("iAgent");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getMesh");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("getShape");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("setUserData");
                if(methodEntry)
                {
                    decoder.decode_void_star("voidPointer");
                }
                else
                {
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("getUserData");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_void_star("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("getPosition");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("moveTo");
                if(methodEntry)
                {
                    decoder.decode_cPosition("newPosition");
                }
                else
                {
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("canCollide");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("canPathfind");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("testCollisionAt");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("newPosition");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 10:
            {
                decoder.writeMethodName("testCollisionTo");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("newPosition");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 11:
            {
                decoder.writeMethodName("testCollisionTo_XY");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_tSigned32("cell");
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 12:
            {
                decoder.writeMethodName("firstCollisionTo");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_tSigned32("cell");
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 13:
            {
                decoder.writeMethodName("findClosestUnobstructedPosition");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("maximumDistance");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 14:
            {
                decoder.writeMethodName("getAllAgentsOverlapped");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                }
                else
                {
                    decoder.decodeAgentVector();
                }
                break;
            }
        case 15:
            {
                decoder.writeMethodName("testCollisionDirectlyAgainstPlacedShape");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decode_cPosition("shapePosition");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 16:
            {
                decoder.writeMethodName("findShortestPathTo");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("target");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 17:
            {
                decoder.writeMethodName("findShortestPathTo_WithQueryCallBack");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("target");
                    decoder.decodeCallBack("queryCallBack");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 18:
            {
                decoder.writeMethodName("findPathAway");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("awayFrom");
                    decoder.decode_tSigned32("distanceAway");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 19:
            {
                decoder.writeMethodName("findPathAway_WithQueryCallBack");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                    decoder.decode_cPosition("awayFrom");
                    decoder.decode_tSigned32("distanceAway");
                    decoder.decodeCallBack("queryCallBack");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 20:
            {
                decoder.writeMethodName("advanceAlongPath");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("path");
                    decoder.decode_float("distance");
                    decoder.decodeAPIObject("context");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 21:
            {
                decoder.writeMethodName("advanceAlongPathWithPrecision");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("path");
                    decoder.decode_float("distance");
                    decoder.decodeAPIObject("context");
                }
                else
                {
                    decoder.decode_float("precisionX");
                    decoder.decode_float("precisionY");
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 22:
            {
                decoder.writeMethodName("generateCurvedPath");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("basePath");
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("startVectorX");
                    decoder.decode_tSigned32("startVectorY");
                    decoder.decode_tSigned32("sectionLength");
                    decoder.decode_float("turnRatio1");
                    decoder.decode_float("turnRatio2");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 23:
            {
                decoder.writeMethodName("setTraverseCost");
                if(methodEntry)
                {
                    decoder.decode_float("cost");
                }
                else
                {
                }
                break;
            }
        case 24:
            {
                decoder.writeMethodName("setTraverseCostDirection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("directionVectorX");
                    decoder.decode_tSigned32("directionVectorY");
                }
                else
                {
                }
                break;
            }
        case 25:
            {
                decoder.writeMethodName("getTraverseCost");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_float("returnValue");
                }
                break;
            }
        case 26:
            {
                decoder.writeMethodName("getTraverseCostDirection");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("directionVectorX");
                    decoder.decode_tSigned32("directionVectorY");
                }
                break;
            }
        case 27:
            {
                decoder.writeMethodName("generateCurvedPath_WithEndVector");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("basePath");
                    decoder.decodeAPIObject("context");
                    decoder.decode_tSigned32("startVectorX");
                    decoder.decode_tSigned32("startVectorY");
                    decoder.decode_tSigned32("endVectorX");
                    decoder.decode_tSigned32("endVectorY");
                    decoder.decode_tSigned32("sectionLength");
                    decoder.decode_float("turnRatio1");
                    decoder.decode_float("turnRatio2");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 28:
            {
                decoder.writeMethodName("isMoveable");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        }
        break;
    case 4:
        decoder.writeInterfaceName("iCollisionContext");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("addAgent");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("removeAgent");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("getNumberOfAgents");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("getAgent");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("includes");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("addObstacleSet");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                }
                else
                {
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("removeObstacleSet");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("context");
                }
                else
                {
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("getNumberOfObstacleSets");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("getObstacleSet");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 10:
            {
                decoder.writeMethodName("updateCollisionPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 11:
            {
                decoder.writeMethodName("updatePathfindingPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 12:
            {
                decoder.writeMethodName("setSurfaceTypeTraverseCost");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("surfaceType");
                    decoder.decode_float("cost");
                }
                else
                {
                }
                break;
            }
        case 13:
            {
                decoder.writeMethodName("setSurfaceTypeTraverseCostDirection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("surfaceType");
                    decoder.decode_tSigned32("directionVectorX");
                    decoder.decode_tSigned32("directionVectorY");
                }
                else
                {
                }
                break;
            }
        case 14:
            {
                decoder.writeMethodName("setQueryBounds");
                if(methodEntry)
                {
                    decoder.decode_cHorizontalRange("bounds");
                }
                else
                {
                }
                break;
            }
        case 15:
            {
                decoder.writeMethodName("clearQueryBounds");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        }
        break;
    case 5:
        decoder.writeInterfaceName("iObstacleSet");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("addAgent");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("removeAgent");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("getNumberOfAgents");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("getAgent");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("index");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("includes");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("agent");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("size");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("empty");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("updateCollisionPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("updatePathfindingPreprocessFor");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                }
                else
                {
                }
                break;
            }
        }
        break;
    case 6:
        decoder.writeInterfaceName("iPath");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("size");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("position");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("pointIndex");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("connectionIndex");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("segmentIndex");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("getPositionArray");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("getConnectionIndexArray");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("getLength");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tUnsigned32("returnValue");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("advanceAlong");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("shape");
                    decoder.decode_float("distance");
                    decoder.decodeAPIObject("context");
                }
                else
                {
                    decoder.decode_float("precisionX");
                    decoder.decode_float("precisionY");
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("renderOnGround");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("originX");
                    decoder.decode_tSigned32("originY");
                }
                else
                {
                }
                break;
            }
        }
        break;
    case 7:
        decoder.writeInterfaceName("iCollisionInfo");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getCollidingLine");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeCollidingLine();
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("getCollidingAgent");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        }
        break;
    case 8:
        decoder.writeInterfaceName("iTerrainCallBack");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("getHeightAt");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_float("returnValue");
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getHeightAtWithPrecision");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                    decoder.decode_float("precisionX");
                    decoder.decode_float("precisionY");
                }
                else
                {
                    decoder.decode_float("returnValue");
                }
                break;
            }
        }
        break;
    case 9:
        decoder.writeInterfaceName("iQueryCallBack");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("desiredCallBackFrequency");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("abort");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        }
        break;
    case 10:
        decoder.writeInterfaceName("iContentChunk");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("preValidate");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("maximumScale");
                    decoder.decode_tSigned32("translationRange");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("save");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("instantiate");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("rotation");
                    decoder.decode_tSigned32("scale");
                    decoder.decode_tSigned32("translationX");
                    decoder.decode_tSigned32("translationY");
                    decoder.decode_float("translationZ");
                    decoder.decode_tSigned32("sectionID");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("instantiate_FloatRotateAndScale");
                if(methodEntry)
                {
                    decoder.decode_float("rotation");
                    decoder.decode_float("scale");
                    decoder.decode_tSigned32("translationX");
                    decoder.decode_tSigned32("translationY");
                    decoder.decode_float("translationZ");
                    decoder.decode_tSigned32("sectionID");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("deleteAllInstances");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("hasGroundComponent");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("hasAnchorsAndShapesComponent");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("numberOfConnectingEdges");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        }
        break;
    case 11:
        decoder.writeInterfaceName("iContentChunkInstance");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("getContentChunk");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("getGroundPointer");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("getAnchorsAndShapesPointer");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("addAnchorsAndShapes");
                if(methodEntry)
                {
                    decoder.decodeAPIObject("mesh");
                    decoder.decode_const_char_star("idPrefix");
                    decoder.decode_tSigned32("numberOfTerrainLayers");
                }
                else
                {
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("getHorizontalRange");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_cHorizontalRange("result");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("numberOfConnectingEdges");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("getConnectingEdgeGeometry");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("connectingEdgeIndex");
                }
                else
                {
                    decoder.decode_tSigned32("startX");
                    decoder.decode_tSigned32("startY");
                    decoder.decode_float("startZ");
                    decoder.decode_tSigned32("endX");
                    decoder.decode_tSigned32("endY");
                    decoder.decode_float("endZ");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("edgesCanConnect");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("connectingEdgeOnThis");
                    decoder.decodeAPIObject("targetInstance");
                    decoder.decode_tSigned32("connectingEdgeOnTarget");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("makeEdgeConnection");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("connectingEdgeOnThis");
                    decoder.decodeAPIObject("targetInstance");
                    decoder.decode_tSigned32("connectingEdgeOnTarget");
                }
                else
                {
                }
                break;
            }
        }
        break;
    case 12:
        decoder.writeInterfaceName("iMeshFederation");
        switch(methodIndex)
        {
        case 0:
            {
                decoder.writeMethodName("destroy");
                if(methodEntry)
                {
                }
                else
                {
                }
                break;
            }
        case 1:
            {
                decoder.writeMethodName("save");
                if(methodEntry)
                {
                    decoder.decode_const_char_star("format");
                }
                else
                {
                }
                break;
            }
        case 2:
            {
                decoder.writeMethodName("size");
                if(methodEntry)
                {
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 3:
            {
                decoder.writeMethodName("coordinatesAreInsideRange");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("x");
                    decoder.decode_tSigned32("y");
                }
                else
                {
                    decoder.decode_bool("returnValue");
                }
                break;
            }
        case 4:
            {
                decoder.writeMethodName("tileForQuery");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("queryStartX");
                    decoder.decode_tSigned32("queryStartY");
                }
                else
                {
                    decoder.decode_tSigned32("returnValue");
                }
                break;
            }
        case 5:
            {
                decoder.writeMethodName("getTileCentre");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                }
                else
                {
                    decoder.decode_tSigned32("centreX");
                    decoder.decode_tSigned32("centreY");
                }
                break;
            }
        case 6:
            {
                decoder.writeMethodName("getHandledRegion_World");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                }
                else
                {
                    decoder.decode_cHorizontalRange("result");
                }
                break;
            }
        case 7:
            {
                decoder.writeMethodName("getRepresentedRegion_World");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                }
                else
                {
                    decoder.decode_cHorizontalRange("result");
                }
                break;
            }
        case 8:
            {
                decoder.writeMethodName("getHandledRegion_Local");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                }
                else
                {
                    decoder.decode_cHorizontalRange("result");
                }
                break;
            }
        case 9:
            {
                decoder.writeMethodName("getRepresentedRegion_Local");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                }
                else
                {
                    decoder.decode_cHorizontalRange("result");
                }
                break;
            }
        case 10:
            {
                decoder.writeMethodName("translatePosition");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("fromTileIndex");
                    decoder.decodeAPIObject("fromMesh");
                    decoder.decode_tSigned32("toTileIndex");
                    decoder.decodeAPIObject("toMesh");
                    decoder.decode_cPosition("fromPosition");
                }
                else
                {
                    decoder.decode_cPosition("returnValue");
                }
                break;
            }
        case 11:
            {
                decoder.writeMethodName("getRepresentedRegionsOverlapped");
                if(methodEntry)
                {
                    decoder.decode_cHorizontalRange("queryRegion");
                }
                else
                {
                    decoder.decodeLongVector();
                }
                break;
            }
        case 12:
            {
                decoder.writeMethodName("buildTileMeshFromContent");
                if(methodEntry)
                {
                    decoder.decode_tSigned32("tileIndex");
                    decoder.decodeContentChunkInstanceVector();
                    decoder.decode_const_char__starconst_star("options");
                }
                else
                {
                    decoder.decodeAPIObject("returnValue");
                }
                break;
            }
        }
        break;
    }
}
